Day16

0. 복습
내부 클래스 (Inner class)

외부 클래스 
		필드
		메소드
		내부 클래스

내부 클래스 : 클래스 내부에 선언된 클래스
외부 클래스 : 내부에 클래스를 가진 클래스 
내부클래스로 선언된 클래스는 외부 클래스를 상속 받지 않아도 외부 클래스의 멤버들 사용가능 
외부 클래스가 메모리에 할당되어야 내부 클래스의 객체화가 가능!
- > 내부 클래스만 별도로 객체화(사용)하지 못한다. 
* 외부 메소드 안에서 내부 클래스를 선언할 수 있다(로콜 내부 클래스)

내부 클래스의 종류 
1) 인스턴스 내부 클래스 
2) 스태틱 내부 클래스
3) 로컬 내부 클래스


익명 클래스(Anonymous class)
- 이름이 없는 클래스 
- 미구현된 멤버를 구현하여 일회성으로 객체를 생성하기 위해 사용한다 

1. 함수형 인터페이스(Functional interface)
단 하나의 추상 메소드를 가지고 있는 인터페이스 
@FunctioanlInterface라는 어노테이션을 명시해주면 하나의 추상 메소드만 선언할 수
있게 제한한다.


2. 람다식(Lambda Expression) : 익명 메소드 
 
식( Expression )과 문(Statement )

식 : 값으로 평가될 수 있는 것, 하나의 값
      식은 값이기 때문에 변수에 저장할 수 있고 매개변수로 넘겨줄 수 있다.

	1
	3.14
	3+1

문(명령문) : 하나의 동작, 변수 선언 및 값 할당, 조건문, 반복문
	       값이 아니기 때문에 변수에 저장할 수 업속 매개변수로 넘겨 줄 수 없다.
	       문은 식을 포함할 수 있다
	        if ((10 +2) >5 )
	       문은 ;으로 끝난다!
		
		if
		if  ~ else if
		for 

- 자바 8버전부터 사용 가능하다.
- 메소드를 하나의 식으로 표현한다. 
- 람다식을 매개변수로 전달 가능하며, 변환도 가능하다.
- 함수형 인터페이스 추상 메소드가 한 개만 선언되기 때문에 람다식으로 재정의 할 때 
  메소드 이름이 필요 없다. 

일반 메소드의 형태

리턴타입 메소드명 (자료형 매개변수){
	     실행할 문장;
	     return 리턴값;
}

람다식 문법
( 매개변수명, …) ->{
	실행할 문장;

}

매개변수명 - > 실행할 문장 ;

람다식 문법
1. 매개변수가 하나인 경우 자료형과 괄호를 생력할 수 있다
2. 매개변수가 2개 이상인 경우 괄호를 생략할 수 없다 
3. 실행할 문장이 한문장인 경우 중괄호를 생략할 수 있다 .
4. 실행할 문장이 한 문장이라도 return 문일 경우 중괄호를 생략할 수 없다.
5. 실행할 문장이 한 문장이고 리턴값이 없는 경우 return과 중괄호를 모두 생략할 수 있다. 

*** 람다식은 아무대서나 사용 가능한 것은 아니다! 
     사용하기 위해서는 함수형 인터페이스가 필요하다!!!!

3. 예외처리 

오류 종류
- 에러 (error ) : 개발자가 해결할 수 없는 문제(코드 수습 불가)
- 예외(Exception) : 개발자가 해결 가능한 문제 (코드로 수습 가능)

예외 발생 시점
- 확인된 예외(check exception) : 컴파일 단계에서 발생하는 예외 (이클립스 빨간줄)
- 미확인 예외(unchecked exception) : 프로그램 실행 중 (런타임) 발생하는 예외

예외 처리
예상되는 예외를 적절히 처리하여 비정상적인 종료를 막는다.

예외처리 문법
Try{
	실행할 명령문;
	(예외가 발생되는 코드)
} catch(예외이름 변수명) { //예상되는 예외 이름을 쓴다/
	예외를 처리하는 명령문;
	 (예외 발생 시 실행할 코드)
} catch(예외 이름 변수명){
	예외를 처리하는 명령문;
}
…..
} finally {
	오류 발생 여부에 상관없이 무조건 실행할 코드;
}


** catch는 위에서부터 순차적으로 검사하므로 위에서 잡힌다면 다른 catch문은 
건너뛰고 finally가 실행된다 

자바의 오류 
자바에서는 발생할 수 있는 오류를 클래스로 정의해 두었다
만약 실행 중 오류가 발생하면 해당 오류 클래스의 객체가 생성된다 .
예외처리를 해두었다면 그 객체의 주소를 catch문의 참조 변수가 받게 된다.
예외 클래스에는 다양한 기능이 있다.

예외클래스에서 제공하는 메소드
1. getMessage() : 예외 메세지를 문자열 반환함
2. printStackTrace() : 예외 발생 지점을 추적하여 단계별로 전부 출력함
3. toString() : 발생한 예외 객체를 문자열로 반환함







































