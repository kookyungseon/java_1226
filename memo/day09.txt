Day09

0.복습

메소드
기능
이름뒤에 소괄호 ( )
단, 키워드 뒤에 소괄호는 메소드가 아니다 ex) if (조건식)

메소드 선언과 구현( 정의 )
리턴타입 메소드명 ( 자료형 매개변수, . . . ){
	실행할 기능 ;
	return 리턴값 (결과값);
}

Ex) int add(int num1, int num2) {
		int result = num1 + num2;
		return result;
	}

메소드의 정의 순서
1. 기능을 생각한다( ex 숫자를 더해주는 기능, 문자열을 출력하는 기능)
2. 반환타입 생각나지 않으면, 우선 void로 작성한다 
3. 기능에 알맞은 메소드명을 작성한다 (가능하면 동사 add, plus)
4. 매개변수를 생각한다 
5. 실행할 문장(구현할 기능)을 작성한다 
6. 리턴값을 생각한다 - > 리턴값에 맞게 반환타입 수정 

메소드를 사용하는 이유 
1. 중복된 코드의 제거 
2. 높은 재사용성 
3. 유지 보수에 유리 

메소드의 인수와 매개변수 
1. 메소드의 인수와 매개변수는 반드시 타입이 일치하거나 자동 형변환이 가능한 타입이여야 한다.
2. retrun되는 값은 반드시 리턴 타입과 일치하거나 자동 형변환이 가능한 타입이어야 한다.

Int add(int num1, int num2) {
	int result = num1 + num2; // 지역변수 
	return result;
}

메소드와 메모리
메소드는 실행되면 메모리의 Stack영역에 메소드 실행에 필요한 저장공간이 생긴다.
그 공간에서 메소드 안에서 선언한 변수(지역변수, 매개변수)들의 저장공간이 생성된다.
메소드의 코드가 모두 실행되어 종료되면 Stack영역에서 해당 메소드의 저장공간이 삭제된다.
그러면 지역변수의 저장공간이 사라지므로 지역변수는 사용이 불가능하다.

오버로딩
같은 클래스 내에서 메소드를 같은 이름으로 선언하는게 가능하다.
조건) 매개변수의 타입이나 갯수만 다르게 한다 

1. 클래스 
객체지향 프로그래밍
: 추상화된 클래스로 객체를 만들고 객체들 간의 관계를 맺어 상화작용하는 프로그래밍 기법
=> 객체가 주인공

변수 = 값;
- > 여러개의 값을 저장하고 싶으면?
배열 (같은 자료형의 여러개의 값을 저장할 수 있다)

메소드  -> 기능
- > 여러개의 메소드 여러개의 변수를 저장하려면?
클래스 

클래스
1. 사용자 정의 타입이다(자료형)
		클래스를 사용하면 여러 타입, 어려 값을 저장할 수 있는 저장공간을 만들 수 있다.
		클래스 안에 선언된 변수를 사용하고 싶다면 해당 클래스 타입으로 변수(객체)를 선언해야한다 

	ex) int num1 = 10;
	     클래스명 객체명 = new 클래스명( ) ;

2. 연관성 있는 저장공간과 기능을 한 곳에 모아 편리하게 관리 할수 있는것 .
	저장공간과 기능을 나누어서 관리하게 되면 코드가 길어졌을 때 사용하기 불편하다. 
	이때 연관되는 저장공간과 기능을 클래스로 묶어서 관리 할 수 있다.
2. 객체를 생성하기 위한 틀, 설계도
	공통되는 속성(변수)과 행위(메소드)를 한번만 선언하고 가져다가 사용만 하도록 설계한다 
	추상적인것(클래스)을 구체화 시키면(메모리에 생성시키면) 객체라고 한다 

클래스의 선언
class 클래스명{
	변수; // 멤버 변수 , 필드 
	메소드(){} // 멤버 메소드 
	// class구성하는 모든 변수, 메소드를 합쳐서 멤버

}

객체화
객체를 만드는 작업, 추상적인 개념을 구체화하는 작업
클래스명 객체명 = new 생성자() ;
Student st1 = new Student();
// st1이라는 변수(참조변수)에 studnet 클래스의 객체의 주소값을 담는다

객체 사용 방법
객체명.멤버명
. (마침표) : 하위연산자, 멤버 접근 연산자 (~의, ~안에)

생성자 
클래스명  객체명 = new 생성자( );
클래스 이름 뒤에 소괄호가 있는 형태, 메소드와 비슷하지만 메소드라고 부르지 않는다.
생성자 리턴이라는 기능이 존재하지 않는다. 

1. 객체를 생성할 때 실행되는 코드가 작성되어 있다.
2. 우리가 직접 선언하지 않아도 자동으로 생성된다 .
3. 주로 해당 클래스의 필드(멤버변수)를 초기화 하는 목적으로 사용한다 .

기본 생성자
public 클래스명( ) { }
매개변수가 없다
클래스 선언시 자동으로 선언되며, 사용자가 직접 생성자를 선언하면 자동으로 만들어주지 않는다 

this
객체 자기 자신을 의미한다 -> 객체 자신의 주소값을 담고 있다
this 자동 생성되는 변수 

this()
자기 자신의 생성자 
생성자 내부에서만 사용가능하며 최상단에 작성해야함

























