day07

0. 복습

반복문(for문)
for(초기식; 조건식; 증감식){
	반복할 문장;
}
초기식 : 처음에 설정할 값
조건식 : 조건이 true면 영역안의 문장 실행시키고 false면 for 탈출
증감식 : 값을 얼마나 증감할지 정하는 식

반복문(while문)
while(조건식){
	반복할 문장;
}
조건식의 결과 값이 true일 동안 반복

반복문(do~while)
while문과 동일하지만 최소 한번은 무조건 실행해야 할 때 사용
do{
  반복실행할 문장;
}while(조건식);


기타 제어문
반복문에서 사용한다. 단break문 switch문에서도 사용가능하다.
break : 즉시 해당 중괄호 영역을 탈출한다
	- if문은 적용되지 않음

continue : 아래코드를 실행하지 않고 즉시 다음 반복으로 넘어간다


배열
문자열 : 문자들의 나열
배열(Array) : 저장공간의 나열

1) 변수를 여러개 선언하면 이름도 여러개 생긴다 -> 각 저장공간을 관리하기 불편
   n칸 배열 선언하면 저장공간이 여러개 생기고, 이름 1개이다 -> 관리하기 편하다
2) 규칙성이 없는 값에 규칙성을 부여하기 위해서(index)

변수 : []     하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간
배열 : [][][][] 하나의 타입으로 된 하나의 값만 저장할 수 있는 저장공간의 나열
		(하나의 타입으로 된 여러값을 저장할 수 있다)


배열의 선언
자료형 변수명 = 값; //변수 만들 때

1) 배열에 어떤 값을 넣을 지 알 때 선언방법
   자료형[] 배열명 = {값1, 값2,...};

2) 배열에 어떤 값을 넣을지는 모르지만 몇칸을 만들지는 알때 선언방법
   자료형[] 배열명 = new 자료형[칸 수];
	
   new : Heap 메모리에 할당, 저장공간의 시작 주소를 가져온다
 
3) 어떤 값을 넣을지도 모르고 몇칸을 만들지도 모를 때 선언방법
   자료형[] 배열명 = null;

   null : 주소의 초기값(어떤 주소가 들어갈지 모를 때 사용)


배열 구조

int[] ar1 = {1, 2, 3, 4, 5};

    	배열
     [][][][][]
인덱스 0 1 2 3 4

index
배열을 생성할 때 각각의 저장공간에 붙여지는 번호
0부터 순차적으로 증가하면서 부여된다
배열의 이름은 한개이기 때문에 이름만으로는 배열의 여러 저장공간에 접근할 수 없다
그렇기 때문에 index를 이용해서 각각의 저장공간에 접근한다.

배열명[index]로 사용하고 하나의 저장공간이므로 변수처럼 사용한다.

length(배열의 길이)
배열을 생성할 때 자동으로 생성되는 저장공간의 수(배열의 요소 개수)
배열의 길이는 한번 만들어지면 변경할 수 없다
배열명.length

배열의 사용
int[] arData = {1, 2, 3, 4, 5};

arData[0] = 10;//arData[0] 저장공간
arData[2] + 9 -> 12 //값으로 사용

int data = arData[4]; 

2차원 배열
배열안에 배열

2차원 배열 선언
자료형[][] 배열명 = new 자료형[행의 개수][열의 개수];

자료형[][] 배열명 = {{값1, 값2, 값3}, {값4, 값5, 값6}};

*열의 수는 생략 후 서로 다른 개수로 열을 만들어서 사용할 수 있지만
행을 생략하게 되면 배열이 성립이되지 않기 때문에 행의 개수 지정해야함

2차원 배열 길이
배열명.length : 행의 길이(배열안의 배열의 개수)
배열명[index].length : 열의 길이
















