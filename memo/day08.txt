Day08

0. 복습

배열
배열 : 저장공간의 나열
	하나의 타입으로 된 값만 저장할 수 있는 저장공간의 나열
	(하나의 타입으로 된 여러 값 저장할 수 있다)
	ex) int [] arr1 = new int [칸수];
	
배열의 선언
1) 배열의 어떤 값을 넣을지 알 때 선언방법
		자료형 [ ] 배열명 = {값1 , 값2,….];
2) 배열에 어떤 값을 넣을지는 모르지만 몇 칸을 만들지는 알때 선언방법
	자료형 [ ] 배열명 = new 자료형[칸수];
3) 어떤 값을 넣을지도 모르고 몇칸을 만들지도 모를 때 선언방법
	자료형 [] 배열명 = null;
	
	new : Heap 메로리에 할당, 저장공간의 시작 주소를 가져온다
	null : 주소의 초기값 (어떤 주소가 들어갈지 모를때 사용)

배열의 구조

int[ ] arData = [1, 2, 3, 4, 5];

Index 
배열을 생성할 때 각각의 저장공간에 자동으로 붙여지는 번호
0부터 순차적으로 증가하면서 부여된다
인덱스를 이용하여 각각의 저장공간에 접근한다
배열명 [.인덱스 번호  ] 
ex) arData[0] -> 1

length 
배열안에 생성되는 저장공간의 수(배열의 길이)
배열명.length

2차원 배열
배열 안에 배열

2차원 배열 선언
자료형[][] 배열명 = new 자료형[행의길이][열의길이];
자료형[][] 배열명 = {{값1, 값2}, {값3, 값4}};

메소드
기능
이름 뒤에 소괄호
단, 키워드 뒤에 소괄호는 메소드가 아니다 
 
메소드 선언과 구현(정의)

리턴타입 메소드명(자료형 매개변수, ...){
   실행할 문장;
   return 리턴값(반환값);
} 


리턴 타입 : 반환값의 자료형, 반환값이 없다면 void를 작성한다
메소드명 : 기능이 유추가 가능하도록 동사로 작성
매개변수 : 외부에서 전달받을 값이 있다면, 자료형과 순서에 맞게 선언해준다(자료형이 반드시 필요)
   생략이 가능하다(단, 외부에서 값을 받을 수 없다)
실행할 문장 : 메소드의 기능을 구현하는 코드를 작성한다. 생략이 가능하다
return : 생략 가능하다. return이 실행되면 메소드가 종료된다.
   return + 메소드의 반환값을 적어준다
   리턴값이 있다면 메소드를 사용한 부분을 통채로 리턴값으로 본다.
   리턴값이 없다면 값이 아니다.

System.out.println("안녕하세요"); //출력메소드
-> "안녕하세요"라는 문자열을 매개변수로 받은 하나의 메소드

void main(String[] args)

메소드의 정의와 사용
1. 메소드를 정의할 때에는 {}중괄호가 있고 메소드 밖에서 정의한다.
2. 메소드를 사용할때에는 {}중괄호가 없고 반드시 메소드 안에서 사용한다.

메소드의 정의 순서
1. 기능을 생각한다(ex 숫자를 더해주는 기능, 문자열을 출력하는 기능 등)
2. 반환 타입이 생각나지 않는다면 우선 void로 작성한다 
3. 기능에 알맞은 메소드명을 작성한다. (가능하면 동사, add print,…)
4. 메개변수를 생각한다 
5. 실행할 문장을 기능에 맞게 작성한다
6. 리턴값을 생각한다 

메소드의 종류
매개변수 		리턴값(반환값)
 X 				x
 X 				o 
 O				x
 O				o

