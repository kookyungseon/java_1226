day12

0. 복습

1) 상속
	(1) 기존에 선언된 클래스의 멤버 ( 생성자 제외 )를 새롭게 만들 클래스에서 	
	      사용하고 싶을 때 상속을 받고 새로운 기능 추가한다 ( 기능을 확장한다 )
	(2) 여러 클래스 선언시 멤버 겹치는 경우 , 부모 클래스를 먼저 선언하고 
	      공통멤버를 자식 클래스들에게 상속해준다.

상속 문법
class Parent{
}

class Child extends Parent{
}

Parent : 부모 클래스, 슈퍼 클래스, 기반 클래스, 상위 클래스 
Child : 자식 클래스, 서브 클래스, 파생 클래스, 하위 클래스 

super
   super : 부모의 참조값
       부모의 멤버에 접근할 때 사용한다
   super() : 부모의 생성자 호출

오버라이딩
부모 클래스에서 선언한 메소드를 자식 클래스에서 수정하고자 할 때 부모 클래스와 동일한 
이름으로 선언, 재정의

오버로딩
같은 클래스 내에서 같은 이름의 메소드를 만드려면 매개변수의 자료형과 갯수를 다르게 한다

1. 접근제한자(접근제어자)
변수, 메소드, 클래스의 접근 권한을 제어하는 것.
default : 다른 패키지에서 접근 불가
public   : 같은 프로젝트 안에 있으면 접근 할 수 있음
protected : 다른 패키지에서 접근 불가, 자식 클래스만 허용
private : 다른 클래스에서 접근 불가, 같은 클래스만 접근 허용
    -> getter, setter 메소드를 통해서 다른 클래스에서 접근 가능
   사용자에게 내부 원리는 감추고 사용법만 외부로 노출시키는 것
   (캡슐화, 은늑화)

2. Casting
타입 변환 종류
(1) 자료형(타입) 변환
(2) 클래스의 객체 타입 변환 (casting)
	: 서로 상속 관계에 있는 클래스 사이에서만 변환 가능
	
1) up casting : 자식 값을 부모 타입으로 형변환 (자동 형 변환)
2) down casting  : 이미 up casting된 값을 자식 타입으로 변환
	* 부모의 값을 자식 타입으로 형변환 시 오류 발생 

Casting 사용하는 이유 
부모타입인 하나의 저장공간에 자식타입의 참조값을 up casting하여 저장할 수 있다

만약 하나의 기능을 하는 메소드를 만들때 매개변수로 여러 자식타입을 받아야 한다고  가정해보다
(자식끼리는 타입이 다르기 때문에)
Casting을 활용하면 부모타입의 매개변수를 가진 하나의 메소드만 만들면 된다.
(부모타입의 참조변수로 모든 자식 타입을 저장할 수 있기 때문)

**주의 사항
1. Up casting으로 자식 참조값을 저장했다면 자식 클래스에 Override(재정의)한 기능이 실행된다.
2. Up casting으로 자식 참조값을 저장했다면 자식 클래스에 새로 구현한 기능들을 사용할 수 없다.
이 경우 down casting을 통해서 복구하고 사용한다.

다형성
하나의 것이 여러 가지 형태를 가질 수 있는 성질
1. 오버로딩
2. 오버라이딩
3. 참조변수의 다형성(매개변수의 다형성)
	부모 클래스 타입의 참조변수로 자식클래스 객체를 가리키는 것을 허용함























