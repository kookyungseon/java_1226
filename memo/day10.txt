day10

클래스
객체 지향 프로그래밍
: 추상화된 클래스로 객체를 만들고 객체들 간의 관계를 맺어 상호작용하는 프로그래밍 기법

추상화 (객체 모델링)
공통적인 특징을 파악하여 하나의 묶음으로 만드는 것

변수 : 하나의 값과 하나의 타입만 저장 가능
배열 : 하나의 타입 여러개의 값을 저장 가능
클래스 : 여러개의 타입과 여러개의 값 메소드를 저장하기 위해 사용하는 것

클래스
1. 사용자 정의 타입 (자료형)
	클래스를 사용하면 여러 타입과 여러 값을 저장할 수 있는 저장 공간을 만들 수 있다. 
	ex) int num1 = 10 ;
	      클래스명 객체명 = new 생성자 ( ) ;

2. 연관성 있는 저장공간과 기능을 한 곳에 모아 편리하게 관리할 수 있는 것

3. 객체를 생성하기 위한 틀, 설계도( 자동차 설계도, 붕어빵 틀 )

클래스 선언
class 클래스명 {
	변수; //멤버 변수, 필드 , 전역변수
	메소드 ( ) { } //멤버 메소드 
	
}

클래스의 멤버
1) 필드
2) 메소드
3) 생성자

객체화
객체를 만드는 작업, 추상적인 개념을 구체화 시키는 작업
클래스명 객체명 = new 생성자( );


생성자 
클래스 이름 뒤에 소괄호가 있는 형태, 메소드 비슷하지만 메소드라고 부르지 않는다 
생성자는 리턴 X
1. 객체를 생성할 때 실행되는 코드가 작성되어 있다
2. 주로 해당 클래스의 필드 (멤버 변수)를 초기화 하는 목적으로 사용한다 

기본생성자
public 클래스명 (){}
매개변수가 없다
클래스 선언 시 자동으로 선언되며, 직접 생성자를 만들면 자동으로 만들어주지 않는다

this
객체 자기 자신을 의미한다  - > 객체 자신의 주소값을 담고 있다
자동으로 생성되는 변수 
String name;
Int age;

public Student (String name, int age) {
	this.name = name ;
	this.age =age;
}

this()
자기 자신의 생성자 
생성자 안에서만 쓸수 있고 최상단에 작성해야함

public Student(String name, int age){
	this.name = name ;
	this.age =age;
}
}

public Student (String name, int age, int stNum ){
	this(name, age);
	this.stNum = stNum;
}

1. static
static : 정적인 <-> 동적인
자바의 저장공간이 프로그램이 시작되고 끝날때까지 유지된다면 -> 정적이다
프로그램 도중에 생겨나거나 사라질 수 있다면 - > 동적이다 

main 메소드에서 코드가 한줄씩 실행 = > new를 통해 객체를 생성하는 코드가 있다면 
실행 도중에 그 객체를 생성함  = > 객체도 저장공간, 이 객체는 동적으로 생성되는 것이다 .
=> 객체가 생성되는 heap영역을 동적 메모리 영역

static 키워드가 붙은 멤버는
프로그램 실행시킨다 - > 클래스의 정보를 읽어들인다(JVM(클래스 로더))
작성한 코드가 실행되기 직전에 읽어들이고 다 읽으면 실행되는 것인데 
static 붙은 멤버들만 클래스 정보를 읽어오는 시점에 미리 메모리에 올라간다.

실행과 만들어져 있는 static 저장공간은 프로그램이 종료 되어야만 메모리에서 사라진다 
static이 붙은 저장공간은 method 영역이다 

static 키워드 
- 멤버 변수의 종류
	static 붙은 변수 : static, 클래스 변수, 정적 변수
	static 안붙은 변수 : 인스턴스 (객체) 변수

- 멤버 메소드의 종류
	static이 붙은 메소드 : stiatic 메소드, 클래스 메소드, 정적 메소드
	static이 안붙은 메소드 : 인스턴스 메소드 

1. static변수 , static메소드는 객체를 생성하지 않아도 사용할 수 있다
2. static변수는 객체와 상관없이 하나의 저장공간이므로 모든 객체가 공유해서 사용한다 
	즉, 모든 객체에서 공통으로 사용되는 변수에 static을 붙이는 것을 고려한다 
3. static메소드는 인스턴스 멤버를 사용할 수 없다.
    static메소드가 메모리에서 사용준비가 끝나도 인스턴스 멘버는 new를 사용해서 
    객체를 생성하기 전까지는 사용할 수 없기 때문에 
4. 클래스명.멤버명으로 사용합니다!

변수의 종류 
1. 지역변수 : 클래스의 중괄호 영역은 포함되지 않으며, 메소드 또는 그 안의 중괄호 영역에서 
	         선언된 변수 
2. 매개변수(parameter) : 메소드의 소괄호 안에서 선언되는 변수 
3. 인스턴스 변수, 전역변수 : 클래스의 중괄호 안에서 선언되는 변수
4. 정적변수, 클래스 변수 : 객체 간 공유 

메소드의 매개변수와 인수
1) 인수, 인자, argument : 메소드를 호출하는 쪽
2) 매개변수, parameter : 메소드를 정의 (선언) 하는 쪽



























