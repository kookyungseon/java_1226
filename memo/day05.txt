Day05

연산자 

연산자 우선 순위 
1. 최우선 연산자 ( ), . 
2. 단항 연산자 : +(양수 ), -(음수 ), — ,++
3. 산술 연산자 : +, -, * , / ,%(나머지 연산자)
4. 쉬프트 연산자 
5. 관계 연산자 : > , <, >=, <=, ==(같다), != (다르다)
6. 논리 연산자 
7. 삼항 연산자 
8. 대입 연산자 (=)

최우선 연산자
( ) : Syste.out.println( );
. : ~안에, ~의 

단항 연산자 
+(양수)
- (음수)
! (NOT) : true, false -> !true -> false, !false -> true
증감연산자 
		++ : +1씩 증가 시켜주는 연산자
		- - : -1씩 감소 시켜주는 연산자 
		전위형 (++a) : 해당 라인부터 바로 적용
		후위형 (a - -): 다음 라인부터 적용

산술 연산자 

+	int, double 		덧셈
	String			연결
-	int, double		뺄셈
	String			불가
*	int, double		곱셈
	String			불가
/	int/int =int		나눗셈
	int/double = double 	나눗셈
	double/int = double 	나눗셈
	int/0 			오류가 발생, 정수는 0으로 나눌 수 없다
	double/0		Infinity
%				나머지 연산자
				ex) 10 % 3 =1 ;

관계연산자 

:결과가 true, false 로 나옴

>, <  :  초과(크니)?, 미만?
>= , <= : 이상?, 이하?
== : 같니? 
!= : 다르니? 

논리연산자
1) && (AND, 논리곱 ) : A && B -> A와 B가 모두 참이라면 -> 연산결과 : 참
			두 비트 모두 1이면 1
2) || (OR, 논리합) : A || B -> A와 B중에 하나라도 참이면 -> 연산결과 : 참
			두 비트가 둘 중 하나라도 1이면 1
3) ^  (XOR, 베타논리합) : A  ^ B  -> A와 B가 다르면 -> 연산결과 : 참
			두 비트가 서로 다르면 1

대입연산자 (=)
복합대입연산자, 누적 연산자
+=	: 더한 값을 대입한다
	ex) num1 += 2 ; // num1 = num1+ 2
	      num1 ++ = num1+=1
-=	: 뺀 값을 대입한다
/=	:나눗셈의 결과값을 대입한다
*=	: 곱한 값을 대입한다
%=	: 나눗셈의 나머지 값을 대입한다 

결합성
하나의 수식에 동일한 연산자가 여러게 사용되면 알맞은 방향으로 결함되어 연산되는 성질
연산자의 진행방향은 왼쪽에서 오른쪽이다
단항, 대입연산자의 진행방향만 오른쪽에서 왼쪽

비트 연산자
   비트(bit) : 정보량의 최소단위 1bit로 표현할 수 있는 수는 0, 1
    장점 : 사람의 언어를 컴퓨터 언어로 바꾸는 과정을 생략하니까 속도가 빠름
   
   1byte = 8bit

   논리곱 & AND 두 비트가 모두 1이면 1
   ex) 10 & 11
       1010(10)
    &  1011(11)
   --------------
       1010(10)

   논리합 | OR 두 비트 중 둘 중 하나라도 1이면 1(=>파이프 연산자)
   ex) 10 | 11
       1010(10)
    |  1011(11)
   ----------------
       1011(11)

   배타논리합 ^ XOR 두 비트가 서로 다르면 1
   ex) 10 ^ 11
       1010(10)
   ^   1011(11)
       ------------------
        0001(1)
	

 ~(논리부정) NOT 0을 1로 1을 0으로 바꿔줌
   부호 비트 : 최상위 비트 양수 0, 음수 1
   NOT 연산을 하게 되면 (양수->음수, 음수->양수)
   ~a = -a-1
   ex) ~10  -> -11
      0|1010(10)
   ------------
      1|0101  ---------> -11
      0|0101(5)

   11 + ? = 0
   1011(11)
      +   0101(-11)
      -------------
   0000


쉬프트 연산자
<<(Left shift, 좌쉬프트) A<<B A를 B만큰 좌로 이동, 2배씩 값이 증가
   ex) 10<<2 = 40
   이동된 곳은 0으로 채움
>>(Right Shift 우쉬프트) A >> B A를 B만큼 우로 이동, 1/2배씩 값이 감소
   이동된 곳은 부호 비트로 채워줌

삼항 연산자
: 3개의 피연산자를 가지는 연산자 
조건식? (조건식이 참일 때 실행되는 문장)  : (조건식이 거짓일 때 실행되는 문장)
Int result = 10 >9 ? 10:9

**제어문
: 프로그램의 흐름을 제어하는 기능

조건문 : 조건이 있을 때 참과 거짓의 결과로 프로그램의 흐름을 바꾸는 것.
반복문 : 프로그램에서 몇번 반복해야할 때 사용하는 것
기타 제어문 : 강제로 프로그램의 흐름을 종료하거나 아래 코드를 실행하지 않을 때 사용하는 것

1. 조건문
	1) if문 : 조건식 true면 영역({})안의 코드가 실행됨. 
	if(조건식){
		실행할 문장(조건식이 참일 때 실행)
	}
	
	if ~ else : if문의 조건식이 거짓이라면 else문 실행
	else : 위의 조건식들이 모두 거짓이면 실행 

	if(조건식) {
			//조건식이 참일 때 실행
	} else{
			//조건식이 거짓일 때 실행
	}

	if ~ else if ~else : 
	else if : 위의 조건식이 거짓이고 else if의 조건식이 참이면 실행
	if(조건식1){
			실행문
	}else if(조건식2){
		실행문(조건식1이 거짓이고 조건식2가 참일경우 )
	}else {
		실행문 (위의 모든 조건들이 거짓일 때 실행)	
	}

	2)switch ~ case문







