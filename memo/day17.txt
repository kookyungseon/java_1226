Day17

0. 복습
람다식 ( Lambda Expression) : 익명 메소드

식 : 값으로 평가될 수 있는 것, 하나의 값
      값이기 때문에 변수에 저장할 수 있고 매개변수로 넘겨줄 수도 있다.
      	1
	3.14
	1+10

문 (명령문) :  하나의 동작, 변수 선언 및 할당, 조건문, 반복문
	         값이 아니기 때문에 변수에 저장할 수 없고 매개변수로 넘겨줄 수 없다
		문은 식을 포함할 수 있다. 
		문은 ;으로 끝난다.

람다식 문법
( 매개변수명, … ) ->  {실행할 문장;};
매개변수 -> 실행할 문장;

** 람다식을 사용하기 위해서는 함수형 인터페이스가 필요하다 


1. 예외처리 

오류의 종류
- 에러 (Error) : 개발자가 해결 할 수 없는 문제  (코드로 수습 불가)
- 예외 (Exception) : 개발자가 해결 가능한 문제 (코드로 수습 가능)

예외의 발생 시점
- 확인된 예외 : 컴파일 단계에서 발생하는 예외(이클립스 빨간줄)
- 미확인 예외 : 프로그램 실행 중 발생하는 예외

예외처리 : 예상되는 예외를 적절히 처리하여 비정상적인 종료를 막는다. 

Try{
	예외가 예상되는 코드 ;
} catch(예외이름 변수명) {
	예외를 처리하는 명령문;
} catch(예외이름 변수명){
	예외 처리하는 명령문;
}
….
finally{
	오류 발생 여부에 상관없이 무조건 실행할 코드;
}

자바의 오류
자바에서는 발생할 수 있는 오류를 클래스로 정의해 두었다. 
만약 실행중 오류가 발생하면 해당 클래스의 객체가 생성된다.
예외처리를 해두었다면 그 객체의 주소를 catch문의 참조변수가 받게된다. 

예외클래스에서 제공하는 메소드
1.  .getMessage() : 예외 메세지를 문자열로 반환함
2.  .printStackTrace()  : 예외 발생 지점을 추적하여 단계별로 전부 출력함
3.  .toString() : 발생한 예외 객체를 문자열로 반환함
		 **toString( )은 생략 가능 -> 참조변수를 출력하면 toString()이 자동으로 
		  사용됨. 

throws와 throw 
throws : 예외 던지기
	메소드에서 발생할 수 있는 오류 메소드를 정의할 때 처리하지 않고
	해당 메소드를 사용하는 쪽이 던져서 사용하는 개발자가 처리하도록 한다. 
	(상황에 맞게 처리하기 위함)

리턴타입 메소드명( ) throws Exception {

}
throw : 예외를 발생시킨다
	ex) throw new 예외명
	
사용자 정의 예외

public class 예외명 extends Exception{
	생성자( ){
		     super(“사용자 정의 예외 메세지”);
	}
}

API
라이브러리 
	      : 다른 개발자들이 미리 만들어 놓은 소스코드 덩어리

API(Application Programming Interface)
	어플리케이션 개발에 필요한 것들을 가져다 쓸수 있게 해주는 중간다리
	개발에 필요한 라이브러리들을 사용하는 방법

JAVA API
	-내부 API
		JDK 설치시 기본적으로 제공해주는 기본 API
		자바로 어플리케이션을 쉽게 구현할 수 있도록 한 라이브러리 집합
		https://docs.oracle.com/en/java/javase/17/docs/api/index.html
	
	-외부 API
		다른 개발자들이 개발한 패키지 및 클래스들을 의미한다
		보통 jar 파일로 배포하면 자바 프로젝트에 built path에 추가하여 사용할 수 있다










































